// @ts-check
const getCep = require('../../src/services/getCep')

test('when query CEP 62280-000, it\'s expected to receive an object without street name', () => {
  expect.assertions(12)
  return getCep('62280-000')
    .then(data => {
      const infosToObject = JSON.parse('{"cep": "62280-000", "logradouro": "", "complemento": "",  "bairro": "",  "localidade": "Santa Quitéria",  "uf": "CE",  "ibge": "2312205",  "gia": "",  "ddd": "88",  "siafi": "1545"}')
      const infosToString = JSON.stringify(infosToObject)
      const receive = JSON.stringify(data.data)
      expect(receive).toBe(infosToString)
      expect(infosToObject.cep).toEqual('62280-000')
      expect(infosToObject.logradouro).toEqual('')
      expect(infosToObject.complemento).toEqual('')
      expect(infosToObject.bairro).toEqual('')
      expect(infosToObject.localidade).toEqual('Santa Quitéria')
      expect(infosToObject.uf).toEqual('CE')
      expect(infosToObject.ibge).toEqual('2312205')
      expect(infosToObject.gia).toEqual('')
      expect(infosToObject.ddd).toEqual('88')
      expect(infosToObject.siafi).toEqual('1545')
      expect(data.status).toBe(200)
    })
})

test('when query CEP 11925-000, it\'s expected to receive an object without street name', () => {
  expect.assertions(12)
  return getCep('11925-000')
    .then(data => {
      const infosToObject = JSON.parse('{"cep": "11925-000", "logradouro": "", "complemento": "",  "bairro": "",  "localidade": "Ilha Comprida",  "uf": "SP",  "ibge": "3520426",  "gia": "7675",  "ddd": "13",  "siafi": "2969"}')
      const infosToString = JSON.stringify(infosToObject)
      const receive = JSON.stringify(data.data)
      expect(receive).toBe(infosToString)
      expect(infosToObject.cep).toEqual('11925-000')
      expect(infosToObject.logradouro).toEqual('')
      expect(infosToObject.complemento).toEqual('')
      expect(infosToObject.bairro).toEqual('')
      expect(infosToObject.localidade).toEqual('Ilha Comprida')
      expect(infosToObject.uf).toEqual('SP')
      expect(infosToObject.ibge).toEqual('3520426')
      expect(infosToObject.gia).toEqual('7675')
      expect(infosToObject.ddd).toEqual('13')
      expect(infosToObject.siafi).toEqual('2969')
      expect(data.status).toBe(200)
    })
})

test('when query CEP 06385-125, it\'s expected to receive an object with address details', () => {
  expect.assertions(12)
  return getCep('06385-125')
    .then(data => {
      const infosToObject = JSON.parse('{"cep": "06385-125", "logradouro": "Rua Sete de Setembro", "complemento": "",  "bairro": "Parque Roseira",  "localidade": "Carapicuíba",  "uf": "SP",  "ibge": "3510609",  "gia": "2550",  "ddd": "11",  "siafi": "6313"}')
      const infosToString = JSON.stringify(infosToObject)
      const receive = JSON.stringify(data.data)
      expect(receive).toBe(infosToString)
      expect(infosToObject.cep).toEqual('06385-125')
      expect(infosToObject.logradouro).toEqual('Rua Sete de Setembro')
      expect(infosToObject.complemento).toEqual('')
      expect(infosToObject.bairro).toEqual('Parque Roseira')
      expect(infosToObject.localidade).toEqual('Carapicuíba')
      expect(infosToObject.uf).toEqual('SP')
      expect(infosToObject.ibge).toEqual('3510609')
      expect(infosToObject.gia).toEqual('2550')
      expect(infosToObject.ddd).toEqual('11')
      expect(infosToObject.siafi).toEqual('6313')
      expect(data.status).toBe(200)
    })
})

test('when query CEP 11450-111, it\'s expected to receive an object with error', () => {
  expect.assertions(3)
  return getCep('11450-111')
    .then(data => {
      const infosToObject = JSON.parse('{"erro":true}')
      const infosToString = JSON.stringify(infosToObject)
      const receive = JSON.stringify(data.data)
      expect(receive).toBe(infosToString)
      expect(infosToObject.erro).toBeTruthy()
      expect(data.status).toBe(200)
    })
})

test('when query an invalid CEP, it\'s expected to receive status code 400', () => {
  expect.assertions(1)
  return getCep('11450')
    .catch(data => {
      const info = data.toJSON()
      expect(info.message).toBe('Request failed with status code 400')
    })
})
